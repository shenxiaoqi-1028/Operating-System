diff --git a/include/unistd.h b/include/unistd.h
index 9d13199..90805e3 100644
--- a/include/unistd.h
+++ b/include/unistd.h
@@ -85,6 +85,7 @@
 
 __BEGIN_DECLS
 __dead	 void _exit(int);
+
 int	 access(const char *, int);
 unsigned int alarm(unsigned int);
 int	 chdir(const char *);
@@ -100,6 +101,8 @@ size_t	 confstr(int, char *, size_t);
 /* also declared in stdio.h */
 char	*cuserid(char *);	/* obsolete */
 #endif /* __CUSERID_DECLARED */
+
+int chrt(long);
 int	 dup(int);
 int	 dup2(int, int);
 int	 execl(const char *, const char *, ...);
diff --git a/minix/commands/service/parse.c b/minix/commands/service/parse.c
index 478d2fa..d9059f9 100644
--- a/minix/commands/service/parse.c
+++ b/minix/commands/service/parse.c
@@ -727,6 +727,8 @@ struct
 	int call_nr;
 } vm_table[] =
 {
+  { "PADCONF",             SYS_PADCONF },
+  
 	{ "EXIT",		VM_EXIT },
 	{ "FORK",		VM_FORK },
 	{ "EXEC_NEWMEM",	VM_EXEC_NEWMEM },
@@ -826,6 +828,7 @@ struct
 	int call_nr;
 } system_tab[]=
 {
+  
 	{ "PRIVCTL",		SYS_PRIVCTL },
 	{ "TRACE",		SYS_TRACE },
 	{ "KILL",		SYS_KILL },
@@ -846,6 +849,7 @@ struct
 	{ "VMCTL",		SYS_VMCTL },
 	{ "MEMSET",		SYS_MEMSET },
 	{ "PADCONF",		SYS_PADCONF },
+ { "CHRT",             SYS_CHRT },
 	{ NULL,		0 }
 };
 
diff --git a/minix/include/minix/callnr.h b/minix/include/minix/callnr.h
index 6030687..4a7e23e 100644
--- a/minix/include/minix/callnr.h
+++ b/minix/include/minix/callnr.h
@@ -11,6 +11,7 @@
 #define IS_PM_CALL(type)	(((type) & ~0xff) == PM_BASE)
 
 /* Message type 0 is traditionally reserved. */
+
 #define PM_EXIT			(PM_BASE + 1)
 #define PM_FORK			(PM_BASE + 2)
 #define PM_WAITPID		(PM_BASE + 3)
@@ -58,8 +59,8 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
-
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define PM_CHRT          (PM_BASE+48)
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff --git a/minix/include/minix/com.h b/minix/include/minix/com.h
index 637f77c..cd7dc8d 100644
--- a/minix/include/minix/com.h
+++ b/minix/include/minix/com.h
@@ -35,6 +35,8 @@
 #ifndef _MINIX_COM_H
 #define _MINIX_COM_H 
 
+
+
 /*===========================================================================*
  *            	Process numbers of processes in the system image	     *
  *===========================================================================*/
@@ -199,6 +201,10 @@
  */ 
 #define KERNEL_CALL	0x600	/* base for kernel calls to SYSTEM */ 
 
+
+#define NR_SYS_CALLS	51	/* number of system calls */
+
+
 #  define SYS_FORK       (KERNEL_CALL + 0)	/* sys_fork() */
 #  define SYS_EXEC       (KERNEL_CALL + 1)	/* sys_exec() */
 #  define SYS_CLEAR	 (KERNEL_CALL + 2)	/* sys_clear() */
@@ -263,8 +269,9 @@
 
 #  define SYS_PADCONF (KERNEL_CALL + 57)	/* sys_padconf() */
 
+#  define SYS_CHRT (KERNEL_CALL + 58)  /*sys_chrt() */
 /* Total */
-#define NR_SYS_CALLS	58	/* number of kernel calls */
+#define NR_SYS_CALLS	59	/* number of kernel calls */
 
 #define SYS_CALL_MASK_SIZE BITMAP_CHUNKS(NR_SYS_CALLS)
 
diff --git a/minix/include/minix/syslib.h b/minix/include/minix/syslib.h
index a9ac487..fd7356e 100644
--- a/minix/include/minix/syslib.h
+++ b/minix/include/minix/syslib.h
@@ -27,6 +27,8 @@ struct rusage;
 int _taskcall(endpoint_t who, int syscallnr, message *msgptr);
 int _kernel_call(int syscallnr, message *msgptr);
 
+
+
 int sys_abort(int how);
 int sys_enable_iop(endpoint_t proc_ep);
 int sys_exec(endpoint_t proc_ep, vir_bytes stack_ptr, vir_bytes progname,
@@ -41,7 +43,7 @@ int sys_schedule(endpoint_t proc_ep, int priority, int quantum, int
 	cpu);
 int sys_schedctl(unsigned flags, endpoint_t proc_ep, int priority, int
 	quantum, int cpu);
-
+int sys_chrt(endpoint_t proc_ep,long deadline);
 /* Shorthands for sys_runctl() system call. */
 #define sys_stop(proc_ep) sys_runctl(proc_ep, RC_STOP, 0)
 #define sys_delay_stop(proc_ep) sys_runctl(proc_ep, RC_STOP, RC_DELAY)
diff --git a/minix/kernel/config.h b/minix/kernel/config.h
index a99b299..549692e 100644
--- a/minix/kernel/config.h
+++ b/minix/kernel/config.h
@@ -16,6 +16,7 @@
  * to keep all kernel calls enabled.
  */
 #define USE_FORK       	   1	/* fork a new process */
+#define USE_CHRT       	   1	/* schedule process according to deadline */
 #define USE_NEWMAP     	   1	/* set a new memory map */
 #define USE_EXEC       	   1	/* update process after execute */
 #define USE_CLEAR	   1	/* clean up after process exit */
diff --git a/minix/kernel/main.c b/minix/kernel/main.c
index a5b4236..2e5c4d8 100644
--- a/minix/kernel/main.c
+++ b/minix/kernel/main.c
@@ -173,6 +173,8 @@ void kmain(kinfo_t *local_cbi)
 	rp = proc_addr(ip->proc_nr);		/* get process pointer */
 	ip->endpoint = rp->p_endpoint;		/* ipc endpoint */
 	rp->p_cpu_time_left = 0;
+ 
+
 	if(i < NR_TASKS)			/* name (tasks only) */
 		strlcpy(rp->p_name, ip->proc_name, sizeof(rp->p_name));
 
diff --git a/minix/kernel/proc.c b/minix/kernel/proc.c
index 3dff67c..9404b57 100644
--- a/minix/kernel/proc.c
+++ b/minix/kernel/proc.c
@@ -1535,6 +1535,11 @@ void enqueue(
  * This function can be used x-cpu as it always uses the queues of the cpu the
  * process is assigned to.
  */
+  if (rp->p_deadline > 0)
+  {
+		rp->p_priority = 4; /* set the priority to user highest level */
+  }
+
   int q = rp->p_priority;	 		/* scheduling queue to use */
   struct proc **rdy_head, **rdy_tail;
   
@@ -1600,6 +1605,11 @@ void enqueue(
  */
 static void enqueue_head(struct proc *rp)
 {
+  if (rp->p_deadline > 0)
+  {
+		rp->p_priority = 4; /* set the priority to the highest level */
+  }
+
   const int q = rp->p_priority;	 		/* scheduling queue to use */
 
   struct proc **rdy_head, **rdy_tail;
@@ -1720,6 +1730,7 @@ static struct proc * pick_proc(void)
  * This function always uses the run queues of the local cpu!
  */
   register struct proc *rp;			/* process to run */
+  register struct proc *tmp;			/* temp process to run */
   struct proc **rdy_head;
   int q;				/* iterate over queues */
 
@@ -1733,6 +1744,26 @@ static struct proc * pick_proc(void)
 		TRACE(VF_PICKPROC, printf("cpu %d queue %d empty\n", cpuid, q););
 		continue;
 	}
+
+    if (q == 4)//遍历优先级为4的进程
+	{
+		rp = rdy_head[q];//从头开始
+		tmp = rp->p_nextready;//头的下一个
+		while (tmp != NULL)
+		{
+			if (tmp->p_deadline > 0)
+			{
+				/* if rp is end or tmp is has less exp_time*/
+				if (rp->p_deadline == 0 || (tmp->p_deadline < rp->p_deadline))
+				{
+					if (proc_is_runnable(tmp))
+						rp = tmp; /* replace the current process */
+				}
+			}
+			tmp = tmp->p_nextready;
+		}
+	}
+
 	assert(proc_is_runnable(rp));
 	if (priv(rp)->s_flags & BILLABLE)	 	
 		get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
@@ -1915,4 +1946,4 @@ void ser_dump_proc()
 void increase_proc_signals(struct proc *p)
 {
 	p->p_signal_received++;
-}
+}
\ No newline at end of file
diff --git a/minix/kernel/proc.h b/minix/kernel/proc.h
index f311535..2fbaab6 100644
--- a/minix/kernel/proc.h
+++ b/minix/kernel/proc.h
@@ -53,7 +53,10 @@ struct proc {
 	unsigned long ipc_async;
 	unsigned long preempted;
   } p_accounting;
-
+  
+  
+  long long  p_deadline; /* deadline of process */
+  
   clock_t p_user_time;		/* user time in ticks */
   clock_t p_sys_time;		/* sys time in ticks */
 
@@ -282,4 +285,4 @@ int mini_send(struct proc *caller_ptr, endpoint_t dst_e, message *m_ptr,
 
 #endif /* __ASSEMBLY__ */
 
-#endif /* PROC_H */
+#endif /* PROC_H */
\ No newline at end of file
diff --git a/minix/kernel/system.c b/minix/kernel/system.c
index 2d1aee1..7b49f12 100644
--- a/minix/kernel/system.c
+++ b/minix/kernel/system.c
@@ -190,6 +190,8 @@ void system_init(void)
   }
 
   /* Process management. */
+ 
+
   map(SYS_FORK, do_fork); 		/* a process forked a new process */
   map(SYS_EXEC, do_exec);		/* update process after execute */
   map(SYS_CLEAR, do_clear);		/* clean up after process exit */
@@ -200,7 +202,7 @@ void system_init(void)
   map(SYS_RUNCTL, do_runctl);		/* set/clear stop flag of a process */
   map(SYS_UPDATE, do_update);		/* update a process into another */
   map(SYS_STATECTL, do_statectl);	/* let a process control its state */
-
+    map(SYS_CHRT,do_chrt);
   /* Signal handling. */
   map(SYS_KILL, do_kill); 		/* cause a process to be signaled */
   map(SYS_GETKSIG, do_getksig);		/* signal manager checks for signals */
diff --git a/minix/kernel/system.h b/minix/kernel/system.h
index d7bd99b..9baee14 100644
--- a/minix/kernel/system.h
+++ b/minix/kernel/system.h
@@ -32,6 +32,8 @@
 
 #include "kernel/kernel.h"
 
+
+
 int do_exec(struct proc * caller, message *m_ptr);
 #if ! USE_EXEC
 #define do_exec NULL
@@ -213,5 +215,11 @@ int do_padconf(struct proc * caller, message *m_ptr);
 #define do_padconf NULL
 #endif
 
-#endif	/* SYSTEM_H */
 
+
+int do_chrt(struct proc *caller, message *m_ptr);
+#if ! USE_CHRT
+#define do_chrt NULL
+#endif
+
+#endif	/* SYSTEM_H */
diff --git a/minix/kernel/system/Makefile.inc b/minix/kernel/system/Makefile.inc
index ef8cf2e..ae65fab 100644
--- a/minix/kernel/system/Makefile.inc
+++ b/minix/kernel/system/Makefile.inc
@@ -39,7 +39,9 @@ SRCS+= 	\
 	do_mcontext.c \
 	do_schedule.c \
 	do_schedctl.c \
-	do_statectl.c
+	do_statectl.c \
+	do_chrt.c
+
 
 .if ${MACHINE_ARCH} == "i386"
 SRCS+=  \
diff --git a/minix/kernel/system/do_clear.c b/minix/kernel/system/do_clear.c
index 372b28f..711d485 100644
--- a/minix/kernel/system/do_clear.c
+++ b/minix/kernel/system/do_clear.c
@@ -31,7 +31,7 @@ int do_clear(struct proc * caller, message * m_ptr)
       return EINVAL;
   }
   rc = proc_addr(exit_p);	/* clean up */
-
+  
   release_address_space(rc);
 
   /* Don't clear if already cleared. */
@@ -77,4 +77,4 @@ int do_clear(struct proc * caller, message * m_ptr)
   return OK;
 }
 
-#endif /* USE_CLEAR */
+#endif /* USE_CLEAR */
\ No newline at end of file
diff --git a/minix/lib/libc/sys/Makefile.inc b/minix/lib/libc/sys/Makefile.inc
index 38fa560..fd51954 100644
--- a/minix/lib/libc/sys/Makefile.inc
+++ b/minix/lib/libc/sys/Makefile.inc
@@ -1,7 +1,7 @@
 .PATH:	${NETBSDSRCDIR}/minix/lib/libc/sys
 
 SRCS+= 	accept.c access.c adjtime.c bind.c brk.c sbrk.c m_closefrom.c getsid.c \
-	chdir.c chmod.c fchmod.c chown.c fchown.c chroot.c close.c \
+	chdir.c chmod.c fchmod.c chown.c fchown.c chroot.c close.c  \
 	clock_getres.c clock_gettime.c clock_settime.c \
 	connect.c dup.c dup2.c execve.c fcntl.c flock.c fpathconf.c fork.c \
 	fstatfs.c fstatvfs.c fsync.c ftruncate.c gcov_flush_sys.c getdents.c \
@@ -22,7 +22,7 @@ SRCS+= 	accept.c access.c adjtime.c bind.c brk.c sbrk.c m_closefrom.c getsid.c \
 	sync.c syscall.c sysuname.c truncate.c umask.c unlink.c write.c \
 	utimensat.c utimes.c futimes.c lutimes.c futimens.c \
 	_exit.c _ucontext.c environ.c __getcwd.c vfork.c sizeup.c init.c \
-	getrusage.c setrlimit.c setpgid.c
+	getrusage.c setrlimit.c setpgid.c chrt.c
 
 # Minix specific syscalls / utils.
 SRCS+= cprofile.c sprofile.c stack_utils.c _mcontext.c
diff --git a/minix/lib/libsys/Makefile b/minix/lib/libsys/Makefile
index e926f69..038c958 100644
--- a/minix/lib/libsys/Makefile
+++ b/minix/lib/libsys/Makefile
@@ -13,7 +13,7 @@ CFLAGS+=	-fno-builtin
 .include "arch/${MACHINE_ARCH}/Makefile.inc"
 
 SRCS+=  \
-	alloc_util.c \
+  alloc_util.c \
 	assert.c \
 	asynsend.c \
 	checkperms.c \
@@ -50,6 +50,7 @@ SRCS+=  \
 	srv_kill.c \
 	stacktrace.c \
 	sys_abort.c \
+  sys_chrt.c \
 	sys_clear.c \
 	sys_cprof.c \
 	sys_diagctl.c \
diff --git a/minix/servers/pm/Makefile b/minix/servers/pm/Makefile
index 75f4c54..165e0a1 100644
--- a/minix/servers/pm/Makefile
+++ b/minix/servers/pm/Makefile
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c chrt.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff --git a/minix/servers/pm/misc.c b/minix/servers/pm/misc.c
index 8014f63..c33db37 100644
--- a/minix/servers/pm/misc.c
+++ b/minix/servers/pm/misc.c
@@ -398,9 +398,13 @@ int do_svrctl()
   }
 }
 
+
+
+
 /*===========================================================================*
  *				do_getrusage				     *
  *===========================================================================*/
+
 int do_getrusage()
 {
 	int res = 0;
@@ -426,3 +430,6 @@ int do_getrusage()
 	return sys_datacopy(SELF, (vir_bytes)&r_usage, who_e,
 		m_in.m_lc_pm_rusage.addr, (vir_bytes) sizeof(r_usage));
 }
+
+
+
diff --git a/minix/servers/pm/proto.h b/minix/servers/pm/proto.h
index 0d27fc8..d5f3ce0 100644
--- a/minix/servers/pm/proto.h
+++ b/minix/servers/pm/proto.h
@@ -4,7 +4,9 @@ struct mproc;
 
 #include <minix/timers.h>
 
+
 /* alarm.c */
+
 int do_itimer(void);
 void set_alarm(struct mproc *rmp, clock_t ticks);
 void check_vtimer(int proc_nr, int sig);
@@ -38,6 +40,8 @@ int do_getmcontext(void);
 int do_setmcontext(void);
 
 /* misc.c */
+
+
 int do_reboot(void);
 int do_sysuname(void);
 int do_getsysinfo(void);
@@ -45,8 +49,10 @@ int do_getprocnr(void);
 int do_getepinfo(void);
 int do_svrctl(void);
 int do_getsetpriority(void);
+
 int do_getrusage(void);
 
+
 /* schedule.c */
 void sched_init(void);
 int sched_start_user(endpoint_t ep, struct mproc *rmp);
@@ -89,3 +95,6 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+
+/* chrt.c */
+int do_chrt(void);
\ No newline at end of file
diff --git a/minix/servers/pm/table.c b/minix/servers/pm/table.c
index 8c8e24a..9cecb9a 100644
--- a/minix/servers/pm/table.c
+++ b/minix/servers/pm/table.c
@@ -12,6 +12,7 @@
 #define CALL(n)	[((n) - PM_BASE)]
 
 int (* const call_vec[NR_PM_CALLS])(void) = {
+  
 	CALL(PM_EXIT)		= do_exit,		/* _exit(2) */
 	CALL(PM_FORK)		= do_fork,		/* fork(2) */
 	CALL(PM_WAITPID)	= do_waitpid,		/* waitpid(2) */
@@ -58,5 +59,6 @@ int (* const call_vec[NR_PM_CALLS])(void) = {
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+  CALL(PM_CHRT)       = do_chrt       /*chrt(2)*/
 };